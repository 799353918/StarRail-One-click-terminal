{
    "sourceFile": "src/generated/main/emu/lunarcore/proto/Notify.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1719130683533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719130689204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,685 @@\n+/*\r\n+ * Decompiled with CFR 0.152.\r\n+ */\r\n package emu.lunarcore.proto;\r\n \r\n-public class Notify {\r\n+import java.io.IOException;\r\n+import us.hebi.quickbuf.FieldName;\r\n+import us.hebi.quickbuf.InvalidProtocolBufferException;\r\n+import us.hebi.quickbuf.JsonSink;\r\n+import us.hebi.quickbuf.JsonSource;\r\n+import us.hebi.quickbuf.MessageFactory;\r\n+import us.hebi.quickbuf.ProtoMessage;\r\n+import us.hebi.quickbuf.ProtoSink;\r\n+import us.hebi.quickbuf.ProtoSource;\r\n+import us.hebi.quickbuf.Utf8String;\r\n \r\n+public final class Notify {\r\n+\r\n+    public static final class RevcMsgScNotify\r\n+            extends ProtoMessage<RevcMsgScNotify>\r\n+            implements Cloneable {\r\n+        private static final long serialVersionUID = 0L;\r\n+        private final Msg msg = Msg.newInstance();\r\n+\r\n+        private RevcMsgScNotify() {\r\n+        }\r\n+\r\n+        public static RevcMsgScNotify newInstance() {\r\n+            return new RevcMsgScNotify();\r\n+        }\r\n+\r\n+        public boolean hasMsg() {\r\n+            return (this.bitField0_ & 1) != 0;\r\n+        }\r\n+\r\n+        public RevcMsgScNotify clearMsg() {\r\n+            this.bitField0_ &= 0xFFFFFFFE;\r\n+            this.msg.clear();\r\n+            return this;\r\n+        }\r\n+\r\n+        public Msg getMsg() {\r\n+            return this.msg;\r\n+        }\r\n+\r\n+        public Msg getMutableMsg() {\r\n+            this.bitField0_ |= 1;\r\n+            return this.msg;\r\n+        }\r\n+\r\n+        public RevcMsgScNotify setMsg(Msg msg) {\r\n+            this.bitField0_ |= 1;\r\n+            this.msg.copyFrom(msg);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify copyFrom(RevcMsgScNotify revcMsgScNotify) {\r\n+            this.cachedSize = revcMsgScNotify.cachedSize;\r\n+            if ((this.bitField0_ | revcMsgScNotify.bitField0_) == 0)\r\n+                return this;\r\n+            this.bitField0_ = revcMsgScNotify.bitField0_;\r\n+            this.msg.copyFrom(revcMsgScNotify.msg);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify mergeFrom(RevcMsgScNotify revcMsgScNotify) {\r\n+            if (revcMsgScNotify.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            if (!revcMsgScNotify.hasMsg())\r\n+                return this;\r\n+            this.getMutableMsg().mergeFrom(revcMsgScNotify.msg);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify clear() {\r\n+            if (this.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            this.bitField0_ = 0;\r\n+            this.msg.clear();\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify clearQuick() {\r\n+            if (this.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            this.bitField0_ = 0;\r\n+            this.msg.clearQuick();\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object object) {\r\n+            if (object == this) {\r\n+                return true;\r\n+            }\r\n+            if (!(object instanceof RevcMsgScNotify)) {\r\n+                return false;\r\n+            }\r\n+            RevcMsgScNotify revcMsgScNotify = (RevcMsgScNotify) object;\r\n+            return this.bitField0_ == revcMsgScNotify.bitField0_\r\n+                    && (!this.hasMsg() || this.msg.equals(revcMsgScNotify.msg));\r\n+        }\r\n+\r\n+        @Override\r\n+        public void writeTo(ProtoSink protoSink) throws IOException {\r\n+            if ((this.bitField0_ & 1) == 0)\r\n+                return;\r\n+            protoSink.writeRawByte((byte) 50);\r\n+            protoSink.writeMessageNoTag(this.msg);\r\n+        }\r\n+\r\n+        @Override\r\n+        protected int computeSerializedSize() {\r\n+            int n = 0;\r\n+            if ((this.bitField0_ & 1) == 0)\r\n+                return n;\r\n+            n += 1 + ProtoSink.computeMessageSizeNoTag(this.msg);\r\n+            return n;\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify mergeFrom(ProtoSource protoSource) throws IOException {\r\n+            int n = protoSource.readTag();\r\n+            block4: while (true) {\r\n+                switch (n) {\r\n+                    case 50: {\r\n+                        protoSource.readMessage(this.msg);\r\n+                        this.bitField0_ |= 1;\r\n+                        n = protoSource.readTag();\r\n+                        if (n == 0)\r\n+                            return this;\r\n+                        continue block4;\r\n+                    }\r\n+                    default: {\r\n+                        if (!protoSource.skipField(n)) {\r\n+                            return this;\r\n+                        }\r\n+                        n = protoSource.readTag();\r\n+                        continue block4;\r\n+                    }\r\n+                    case 0:\r\n+                }\r\n+                break;\r\n+            }\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public void writeTo(JsonSink jsonSink) throws IOException {\r\n+            jsonSink.beginObject();\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                jsonSink.writeMessage(FieldNames.msg, this.msg);\r\n+            }\r\n+            jsonSink.endObject();\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify mergeFrom(JsonSource jsonSource) throws IOException {\r\n+            if (!jsonSource.beginObject()) {\r\n+                return this;\r\n+            }\r\n+            block3: while (true) {\r\n+                if (jsonSource.isAtEnd()) {\r\n+                    jsonSource.endObject();\r\n+                    return this;\r\n+                }\r\n+                switch (jsonSource.readFieldHash()) {\r\n+                    case 108417: {\r\n+                        if (jsonSource.isAtField(FieldNames.msg)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block3;\r\n+                            jsonSource.readMessage(this.msg);\r\n+                            this.bitField0_ |= 1;\r\n+                            continue block3;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block3;\r\n+                    }\r\n+                }\r\n+                jsonSource.skipUnknownField();\r\n+            }\r\n+        }\r\n+\r\n+        @Override\r\n+        public RevcMsgScNotify clone() {\r\n+            return new RevcMsgScNotify().copyFrom(this);\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean isEmpty() {\r\n+            return this.bitField0_ == 0;\r\n+        }\r\n+\r\n+        public static RevcMsgScNotify parseFrom(byte[] byArray) throws InvalidProtocolBufferException {\r\n+            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), byArray).checkInitialized();\r\n+        }\r\n+\r\n+        public static RevcMsgScNotify parseFrom(ProtoSource protoSource) throws IOException {\r\n+            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), protoSource).checkInitialized();\r\n+        }\r\n+\r\n+        public static RevcMsgScNotify parseFrom(JsonSource jsonSource) throws IOException {\r\n+            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), jsonSource).checkInitialized();\r\n+        }\r\n+\r\n+        public static MessageFactory<RevcMsgScNotify> getFactory() {\r\n+            return RevcMsgScNotifyFactory.INSTANCE;\r\n+        }\r\n+\r\n+        static class FieldNames {\r\n+            static final FieldName msg = FieldName.forField(\"msg\");\r\n+\r\n+            FieldNames() {\r\n+            }\r\n+        }\r\n+\r\n+        private static enum RevcMsgScNotifyFactory implements MessageFactory<RevcMsgScNotify> {\r\n+            INSTANCE;\r\n+\r\n+            @Override\r\n+            public RevcMsgScNotify create() {\r\n+                return RevcMsgScNotify.newInstance();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public static final class Msg\r\n+            extends ProtoMessage<Msg>\r\n+            implements Cloneable {\r\n+        private static final long serialVersionUID = 0L;\r\n+        private long i9;\r\n+        private int i3;\r\n+        private int i11;\r\n+        private int i15;\r\n+        private final Utf8String text = Utf8String.newEmptyInstance();\r\n+\r\n+        private Msg() {\r\n+        }\r\n+\r\n+        public static Msg newInstance() {\r\n+            return new Msg();\r\n+        }\r\n+\r\n+        public boolean hasI9() {\r\n+            return (this.bitField0_ & 1) != 0;\r\n+        }\r\n+\r\n+        public Msg clearI9() {\r\n+            this.bitField0_ &= 0xFFFFFFFE;\r\n+            this.i9 = 0L;\r\n+            return this;\r\n+        }\r\n+\r\n+        public long getI9() {\r\n+            return this.i9;\r\n+        }\r\n+\r\n+        public Msg setI9(long l) {\r\n+            this.bitField0_ |= 1;\r\n+            this.i9 = l;\r\n+            return this;\r\n+        }\r\n+\r\n+        public boolean hasI3() {\r\n+            return (this.bitField0_ & 2) != 0;\r\n+        }\r\n+\r\n+        public Msg clearI3() {\r\n+            this.bitField0_ &= 0xFFFFFFFD;\r\n+            this.i3 = 0;\r\n+            return this;\r\n+        }\r\n+\r\n+        public int getI3() {\r\n+            return this.i3;\r\n+        }\r\n+\r\n+        public Msg setI3(int n) {\r\n+            this.bitField0_ |= 2;\r\n+            this.i3 = n;\r\n+            return this;\r\n+        }\r\n+\r\n+        public boolean hasI11() {\r\n+            return (this.bitField0_ & 4) != 0;\r\n+        }\r\n+\r\n+        public Msg clearI11() {\r\n+            this.bitField0_ &= 0xFFFFFFFB;\r\n+            this.i11 = 0;\r\n+            return this;\r\n+        }\r\n+\r\n+        public int getI11() {\r\n+            return this.i11;\r\n+        }\r\n+\r\n+        public Msg setI11(int n) {\r\n+            this.bitField0_ |= 4;\r\n+            this.i11 = n;\r\n+            return this;\r\n+        }\r\n+\r\n+        public boolean hasI15() {\r\n+            return (this.bitField0_ & 8) != 0;\r\n+        }\r\n+\r\n+        public Msg clearI15() {\r\n+            this.bitField0_ &= 0xFFFFFFF7;\r\n+            this.i15 = 0;\r\n+            return this;\r\n+        }\r\n+\r\n+        public int getI15() {\r\n+            return this.i15;\r\n+        }\r\n+\r\n+        public Msg setI15(int n) {\r\n+            this.bitField0_ |= 8;\r\n+            this.i15 = n;\r\n+            return this;\r\n+        }\r\n+\r\n+        public boolean hasText() {\r\n+            return (this.bitField0_ & 0x10) != 0;\r\n+        }\r\n+\r\n+        public Msg clearText() {\r\n+            this.bitField0_ &= 0xFFFFFFEF;\r\n+            this.text.clear();\r\n+            return this;\r\n+        }\r\n+\r\n+        public String getText() {\r\n+            return this.text.getString();\r\n+        }\r\n+\r\n+        public Utf8String getTextBytes() {\r\n+            return this.text;\r\n+        }\r\n+\r\n+        public Utf8String getMutableTextBytes() {\r\n+            this.bitField0_ |= 0x10;\r\n+            return this.text;\r\n+        }\r\n+\r\n+        public Msg setText(CharSequence charSequence) {\r\n+            this.bitField0_ |= 0x10;\r\n+            this.text.copyFrom(charSequence);\r\n+            return this;\r\n+        }\r\n+\r\n+        public Msg setText(Utf8String utf8String) {\r\n+            this.bitField0_ |= 0x10;\r\n+            this.text.copyFrom(utf8String);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg copyFrom(Msg msg) {\r\n+            this.cachedSize = msg.cachedSize;\r\n+            if ((this.bitField0_ | msg.bitField0_) == 0)\r\n+                return this;\r\n+            this.bitField0_ = msg.bitField0_;\r\n+            this.i9 = msg.i9;\r\n+            this.i3 = msg.i3;\r\n+            this.i11 = msg.i11;\r\n+            this.i15 = msg.i15;\r\n+            this.text.copyFrom(msg.text);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg mergeFrom(Msg msg) {\r\n+            if (msg.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            if (msg.hasI9()) {\r\n+                this.setI9(msg.i9);\r\n+            }\r\n+            if (msg.hasI3()) {\r\n+                this.setI3(msg.i3);\r\n+            }\r\n+            if (msg.hasI11()) {\r\n+                this.setI11(msg.i11);\r\n+            }\r\n+            if (msg.hasI15()) {\r\n+                this.setI15(msg.i15);\r\n+            }\r\n+            if (!msg.hasText())\r\n+                return this;\r\n+            this.getMutableTextBytes().copyFrom(msg.text);\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg clear() {\r\n+            if (this.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            this.bitField0_ = 0;\r\n+            this.i9 = 0L;\r\n+            this.i3 = 0;\r\n+            this.i11 = 0;\r\n+            this.i15 = 0;\r\n+            this.text.clear();\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg clearQuick() {\r\n+            if (this.isEmpty()) {\r\n+                return this;\r\n+            }\r\n+            this.cachedSize = -1;\r\n+            this.bitField0_ = 0;\r\n+            this.text.clear();\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object object) {\r\n+            if (object == this) {\r\n+                return true;\r\n+            }\r\n+            if (!(object instanceof Msg)) {\r\n+                return false;\r\n+            }\r\n+            Msg msg = (Msg) object;\r\n+            return !(this.bitField0_ != msg.bitField0_ || this.hasI9() && this.i9 != msg.i9\r\n+                    || this.hasI3() && this.i3 != msg.i3 || this.hasI11() && this.i11 != msg.i11\r\n+                    || this.hasI15() && this.i15 != msg.i15 || this.hasText() && !this.text.equals(msg.text));\r\n+        }\r\n+\r\n+        @Override\r\n+        public void writeTo(ProtoSink protoSink) throws IOException {\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                protoSink.writeRawByte((byte) 72);\r\n+                protoSink.writeUInt64NoTag(this.i9);\r\n+            }\r\n+            if ((this.bitField0_ & 2) != 0) {\r\n+                protoSink.writeRawByte((byte) 24);\r\n+                protoSink.writeUInt32NoTag(this.i3);\r\n+            }\r\n+            if ((this.bitField0_ & 4) != 0) {\r\n+                protoSink.writeRawByte((byte) 88);\r\n+                protoSink.writeUInt32NoTag(this.i11);\r\n+            }\r\n+            if ((this.bitField0_ & 8) != 0) {\r\n+                protoSink.writeRawByte((byte) 120);\r\n+                protoSink.writeUInt32NoTag(this.i15);\r\n+            }\r\n+            if ((this.bitField0_ & 0x10) == 0)\r\n+                return;\r\n+            protoSink.writeRawByte((byte) 34);\r\n+            protoSink.writeStringNoTag(this.text);\r\n+        }\r\n+\r\n+        @Override\r\n+        protected int computeSerializedSize() {\r\n+            int n = 0;\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                n += 1 + ProtoSink.computeUInt64SizeNoTag(this.i9);\r\n+            }\r\n+            if ((this.bitField0_ & 2) != 0) {\r\n+                n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i3);\r\n+            }\r\n+            if ((this.bitField0_ & 4) != 0) {\r\n+                n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i11);\r\n+            }\r\n+            if ((this.bitField0_ & 8) != 0) {\r\n+                n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i15);\r\n+            }\r\n+            if ((this.bitField0_ & 0x10) == 0)\r\n+                return n;\r\n+            n += 1 + ProtoSink.computeStringSizeNoTag(this.text);\r\n+            return n;\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg mergeFrom(ProtoSource protoSource) throws IOException {\r\n+            int n = protoSource.readTag();\r\n+            block8: while (true) {\r\n+                switch (n) {\r\n+                    case 72: {\r\n+                        this.i9 = protoSource.readUInt64();\r\n+                        this.bitField0_ |= 1;\r\n+                        n = protoSource.readTag();\r\n+                        if (n != 24)\r\n+                            continue block8;\r\n+                    }\r\n+                    case 24: {\r\n+                        this.i3 = protoSource.readUInt32();\r\n+                        this.bitField0_ |= 2;\r\n+                        n = protoSource.readTag();\r\n+                        if (n != 88)\r\n+                            continue block8;\r\n+                    }\r\n+                    case 88: {\r\n+                        this.i11 = protoSource.readUInt32();\r\n+                        this.bitField0_ |= 4;\r\n+                        n = protoSource.readTag();\r\n+                        if (n != 120)\r\n+                            continue block8;\r\n+                    }\r\n+                    case 120: {\r\n+                        this.i15 = protoSource.readUInt32();\r\n+                        this.bitField0_ |= 8;\r\n+                        n = protoSource.readTag();\r\n+                        if (n != 34)\r\n+                            continue block8;\r\n+                    }\r\n+                    case 34: {\r\n+                        protoSource.readString(this.text);\r\n+                        this.bitField0_ |= 0x10;\r\n+                        n = protoSource.readTag();\r\n+                        if (n == 0)\r\n+                            return this;\r\n+                        continue block8;\r\n+                    }\r\n+                    default: {\r\n+                        if (!protoSource.skipField(n)) {\r\n+                            return this;\r\n+                        }\r\n+                        n = protoSource.readTag();\r\n+                        continue block8;\r\n+                    }\r\n+                    case 0:\r\n+                }\r\n+                break;\r\n+            }\r\n+            return this;\r\n+        }\r\n+\r\n+        @Override\r\n+        public void writeTo(JsonSink jsonSink) throws IOException {\r\n+            jsonSink.beginObject();\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                jsonSink.writeUInt64(FieldNames.i9, this.i9);\r\n+            }\r\n+            if ((this.bitField0_ & 2) != 0) {\r\n+                jsonSink.writeUInt32(FieldNames.i3, this.i3);\r\n+            }\r\n+            if ((this.bitField0_ & 4) != 0) {\r\n+                jsonSink.writeUInt32(FieldNames.i11, this.i11);\r\n+            }\r\n+            if ((this.bitField0_ & 8) != 0) {\r\n+                jsonSink.writeUInt32(FieldNames.i15, this.i15);\r\n+            }\r\n+            if ((this.bitField0_ & 0x10) != 0) {\r\n+                jsonSink.writeString(FieldNames.text, this.text);\r\n+            }\r\n+            jsonSink.endObject();\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg mergeFrom(JsonSource jsonSource) throws IOException {\r\n+            if (!jsonSource.beginObject()) {\r\n+                return this;\r\n+            }\r\n+            block7: while (true) {\r\n+                if (jsonSource.isAtEnd()) {\r\n+                    jsonSource.endObject();\r\n+                    return this;\r\n+                }\r\n+                switch (jsonSource.readFieldHash()) {\r\n+                    case 3312: {\r\n+                        if (jsonSource.isAtField(FieldNames.i9)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block7;\r\n+                            this.i9 = jsonSource.readUInt64();\r\n+                            this.bitField0_ |= 1;\r\n+                            continue block7;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block7;\r\n+                    }\r\n+                    case 3306: {\r\n+                        if (jsonSource.isAtField(FieldNames.i3)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block7;\r\n+                            this.i3 = jsonSource.readUInt32();\r\n+                            this.bitField0_ |= 2;\r\n+                            continue block7;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block7;\r\n+                    }\r\n+                    case 102473: {\r\n+                        if (jsonSource.isAtField(FieldNames.i11)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block7;\r\n+                            this.i11 = jsonSource.readUInt32();\r\n+                            this.bitField0_ |= 4;\r\n+                            continue block7;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block7;\r\n+                    }\r\n+                    case 102477: {\r\n+                        if (jsonSource.isAtField(FieldNames.i15)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block7;\r\n+                            this.i15 = jsonSource.readUInt32();\r\n+                            this.bitField0_ |= 8;\r\n+                            continue block7;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block7;\r\n+                    }\r\n+                    case 3556653: {\r\n+                        if (jsonSource.isAtField(FieldNames.text)) {\r\n+                            if (jsonSource.trySkipNullValue())\r\n+                                continue block7;\r\n+                            jsonSource.readString(this.text);\r\n+                            this.bitField0_ |= 0x10;\r\n+                            continue block7;\r\n+                        }\r\n+                        jsonSource.skipUnknownField();\r\n+                        continue block7;\r\n+                    }\r\n+                }\r\n+                jsonSource.skipUnknownField();\r\n+            }\r\n+        }\r\n+\r\n+        @Override\r\n+        public Msg clone() {\r\n+            return new Msg().copyFrom(this);\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean isEmpty() {\r\n+            return this.bitField0_ == 0;\r\n+        }\r\n+\r\n+        public static Msg parseFrom(byte[] byArray) throws InvalidProtocolBufferException {\r\n+            return (Msg) ProtoMessage.mergeFrom(new Msg(), byArray).checkInitialized();\r\n+        }\r\n+\r\n+        public static Msg parseFrom(ProtoSource protoSource) throws IOException {\r\n+            return (Msg) ProtoMessage.mergeFrom(new Msg(), protoSource).checkInitialized();\r\n+        }\r\n+\r\n+        public static Msg parseFrom(JsonSource jsonSource) throws IOException {\r\n+            return (Msg) ProtoMessage.mergeFrom(new Msg(), jsonSource).checkInitialized();\r\n+        }\r\n+\r\n+        public static MessageFactory<Msg> getFactory() {\r\n+            return MsgFactory.INSTANCE;\r\n+        }\r\n+\r\n+        static class FieldNames {\r\n+            static final FieldName i9 = FieldName.forField(\"i9\");\r\n+            static final FieldName i3 = FieldName.forField(\"i3\");\r\n+            static final FieldName i11 = FieldName.forField(\"i11\");\r\n+            static final FieldName i15 = FieldName.forField(\"i15\");\r\n+            static final FieldName text = FieldName.forField(\"text\");\r\n+\r\n+            FieldNames() {\r\n+            }\r\n+        }\r\n+\r\n+        private static enum MsgFactory implements MessageFactory<Msg> {\r\n+            INSTANCE;\r\n+\r\n+            @Override\r\n+            public Msg create() {\r\n+                return Msg.newInstance();\r\n+            }\r\n+        }\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1719130698320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-/*\r\n- * Decompiled with CFR 0.152.\r\n- */\r\n+\r\n package emu.lunarcore.proto;\r\n \r\n import java.io.IOException;\r\n import us.hebi.quickbuf.FieldName;\r\n"
                },
                {
                    "date": 1719130707663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n package emu.lunarcore.proto;\r\n \r\n import java.io.IOException;\r\n import us.hebi.quickbuf.FieldName;\r\n"
                },
                {
                    "date": 1719137370049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// Decompiled with: CFR 0.152\r\n+// Class Version: 17\r\n package emu.lunarcore.proto;\r\n \r\n import java.io.IOException;\r\n import us.hebi.quickbuf.FieldName;\r\n@@ -53,12 +55,12 @@\n \r\n         @Override\r\n         public RevcMsgScNotify copyFrom(RevcMsgScNotify revcMsgScNotify) {\r\n             this.cachedSize = revcMsgScNotify.cachedSize;\r\n-            if ((this.bitField0_ | revcMsgScNotify.bitField0_) == 0)\r\n-                return this;\r\n-            this.bitField0_ = revcMsgScNotify.bitField0_;\r\n-            this.msg.copyFrom(revcMsgScNotify.msg);\r\n+            if ((this.bitField0_ | revcMsgScNotify.bitField0_) != 0) {\r\n+                this.bitField0_ = revcMsgScNotify.bitField0_;\r\n+                this.msg.copyFrom(revcMsgScNotify.msg);\r\n+            }\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n@@ -66,11 +68,11 @@\n             if (revcMsgScNotify.isEmpty()) {\r\n                 return this;\r\n             }\r\n             this.cachedSize = -1;\r\n-            if (!revcMsgScNotify.hasMsg())\r\n-                return this;\r\n-            this.getMutableMsg().mergeFrom(revcMsgScNotify.msg);\r\n+            if (revcMsgScNotify.hasMsg()) {\r\n+                this.getMutableMsg().mergeFrom(revcMsgScNotify.msg);\r\n+            }\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n@@ -109,20 +111,20 @@\n         }\r\n \r\n         @Override\r\n         public void writeTo(ProtoSink protoSink) throws IOException {\r\n-            if ((this.bitField0_ & 1) == 0)\r\n-                return;\r\n-            protoSink.writeRawByte((byte) 50);\r\n-            protoSink.writeMessageNoTag(this.msg);\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                protoSink.writeRawByte((byte) 50);\r\n+                protoSink.writeMessageNoTag(this.msg);\r\n+            }\r\n         }\r\n \r\n         @Override\r\n         protected int computeSerializedSize() {\r\n             int n = 0;\r\n-            if ((this.bitField0_ & 1) == 0)\r\n-                return n;\r\n-            n += 1 + ProtoSink.computeMessageSizeNoTag(this.msg);\r\n+            if ((this.bitField0_ & 1) != 0) {\r\n+                n += 1 + ProtoSink.computeMessageSizeNoTag(this.msg);\r\n+            }\r\n             return n;\r\n         }\r\n \r\n         @Override\r\n@@ -133,24 +135,20 @@\n                     case 50: {\r\n                         protoSource.readMessage(this.msg);\r\n                         this.bitField0_ |= 1;\r\n                         n = protoSource.readTag();\r\n-                        if (n == 0)\r\n-                            return this;\r\n-                        continue block4;\r\n+                        if (n != 0)\r\n+                            continue block4;\r\n                     }\r\n-                    default: {\r\n-                        if (!protoSource.skipField(n)) {\r\n-                            return this;\r\n-                        }\r\n-                        n = protoSource.readTag();\r\n-                        continue block4;\r\n+                    case 0: {\r\n+                        return this;\r\n                     }\r\n-                    case 0:\r\n                 }\r\n-                break;\r\n+                if (!protoSource.skipField(n)) {\r\n+                    return this;\r\n+                }\r\n+                n = protoSource.readTag();\r\n             }\r\n-            return this;\r\n         }\r\n \r\n         @Override\r\n         public void writeTo(JsonSink jsonSink) throws IOException {\r\n@@ -165,13 +163,9 @@\n         public RevcMsgScNotify mergeFrom(JsonSource jsonSource) throws IOException {\r\n             if (!jsonSource.beginObject()) {\r\n                 return this;\r\n             }\r\n-            block3: while (true) {\r\n-                if (jsonSource.isAtEnd()) {\r\n-                    jsonSource.endObject();\r\n-                    return this;\r\n-                }\r\n+            block3: while (!jsonSource.isAtEnd()) {\r\n                 switch (jsonSource.readFieldHash()) {\r\n                     case 108417: {\r\n                         if (jsonSource.isAtField(FieldNames.msg)) {\r\n                             if (jsonSource.trySkipNullValue())\r\n@@ -185,8 +179,10 @@\n                     }\r\n                 }\r\n                 jsonSource.skipUnknownField();\r\n             }\r\n+            jsonSource.endObject();\r\n+            return this;\r\n         }\r\n \r\n         @Override\r\n         public RevcMsgScNotify clone() {\r\n@@ -365,16 +361,16 @@\n \r\n         @Override\r\n         public Msg copyFrom(Msg msg) {\r\n             this.cachedSize = msg.cachedSize;\r\n-            if ((this.bitField0_ | msg.bitField0_) == 0)\r\n-                return this;\r\n-            this.bitField0_ = msg.bitField0_;\r\n-            this.i9 = msg.i9;\r\n-            this.i3 = msg.i3;\r\n-            this.i11 = msg.i11;\r\n-            this.i15 = msg.i15;\r\n-            this.text.copyFrom(msg.text);\r\n+            if ((this.bitField0_ | msg.bitField0_) != 0) {\r\n+                this.bitField0_ = msg.bitField0_;\r\n+                this.i9 = msg.i9;\r\n+                this.i3 = msg.i3;\r\n+                this.i11 = msg.i11;\r\n+                this.i15 = msg.i15;\r\n+                this.text.copyFrom(msg.text);\r\n+            }\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n@@ -394,11 +390,11 @@\n             }\r\n             if (msg.hasI15()) {\r\n                 this.setI15(msg.i15);\r\n             }\r\n-            if (!msg.hasText())\r\n-                return this;\r\n-            this.getMutableTextBytes().copyFrom(msg.text);\r\n+            if (msg.hasText()) {\r\n+                this.getMutableTextBytes().copyFrom(msg.text);\r\n+            }\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n@@ -458,12 +454,12 @@\n             if ((this.bitField0_ & 8) != 0) {\r\n                 protoSink.writeRawByte((byte) 120);\r\n                 protoSink.writeUInt32NoTag(this.i15);\r\n             }\r\n-            if ((this.bitField0_ & 0x10) == 0)\r\n-                return;\r\n-            protoSink.writeRawByte((byte) 34);\r\n-            protoSink.writeStringNoTag(this.text);\r\n+            if ((this.bitField0_ & 0x10) != 0) {\r\n+                protoSink.writeRawByte((byte) 34);\r\n+                protoSink.writeStringNoTag(this.text);\r\n+            }\r\n         }\r\n \r\n         @Override\r\n         protected int computeSerializedSize() {\r\n@@ -479,11 +475,11 @@\n             }\r\n             if ((this.bitField0_ & 8) != 0) {\r\n                 n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i15);\r\n             }\r\n-            if ((this.bitField0_ & 0x10) == 0)\r\n-                return n;\r\n-            n += 1 + ProtoSink.computeStringSizeNoTag(this.text);\r\n+            if ((this.bitField0_ & 0x10) != 0) {\r\n+                n += 1 + ProtoSink.computeStringSizeNoTag(this.text);\r\n+            }\r\n             return n;\r\n         }\r\n \r\n         @Override\r\n@@ -522,24 +518,20 @@\n                     case 34: {\r\n                         protoSource.readString(this.text);\r\n                         this.bitField0_ |= 0x10;\r\n                         n = protoSource.readTag();\r\n-                        if (n == 0)\r\n-                            return this;\r\n-                        continue block8;\r\n+                        if (n != 0)\r\n+                            continue block8;\r\n                     }\r\n-                    default: {\r\n-                        if (!protoSource.skipField(n)) {\r\n-                            return this;\r\n-                        }\r\n-                        n = protoSource.readTag();\r\n-                        continue block8;\r\n+                    case 0: {\r\n+                        return this;\r\n                     }\r\n-                    case 0:\r\n                 }\r\n-                break;\r\n+                if (!protoSource.skipField(n)) {\r\n+                    return this;\r\n+                }\r\n+                n = protoSource.readTag();\r\n             }\r\n-            return this;\r\n         }\r\n \r\n         @Override\r\n         public void writeTo(JsonSink jsonSink) throws IOException {\r\n@@ -566,13 +558,9 @@\n         public Msg mergeFrom(JsonSource jsonSource) throws IOException {\r\n             if (!jsonSource.beginObject()) {\r\n                 return this;\r\n             }\r\n-            block7: while (true) {\r\n-                if (jsonSource.isAtEnd()) {\r\n-                    jsonSource.endObject();\r\n-                    return this;\r\n-                }\r\n+            block7: while (!jsonSource.isAtEnd()) {\r\n                 switch (jsonSource.readFieldHash()) {\r\n                     case 3312: {\r\n                         if (jsonSource.isAtField(FieldNames.i9)) {\r\n                             if (jsonSource.trySkipNullValue())\r\n@@ -630,8 +618,10 @@\n                     }\r\n                 }\r\n                 jsonSource.skipUnknownField();\r\n             }\r\n+            jsonSource.endObject();\r\n+            return this;\r\n         }\r\n \r\n         @Override\r\n         public Msg clone() {\r\n"
                },
                {
                    "date": 1719137500565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,34 @@\n-// Decompiled with: CFR 0.152\r\n+// Decompiled with: Procyon 0.6.0\r\n // Class Version: 17\r\n package emu.lunarcore.proto;\r\n \r\n-import java.io.IOException;\r\n+import us.hebi.quickbuf.Utf8String;\r\n import us.hebi.quickbuf.FieldName;\r\n+import us.hebi.quickbuf.MessageFactory;\r\n import us.hebi.quickbuf.InvalidProtocolBufferException;\r\n+import us.hebi.quickbuf.JsonSource;\r\n import us.hebi.quickbuf.JsonSink;\r\n-import us.hebi.quickbuf.JsonSource;\r\n-import us.hebi.quickbuf.MessageFactory;\r\n+import us.hebi.quickbuf.ProtoSource;\r\n+import java.io.IOException;\r\n+import us.hebi.quickbuf.ProtoSink;\r\n import us.hebi.quickbuf.ProtoMessage;\r\n-import us.hebi.quickbuf.ProtoSink;\r\n-import us.hebi.quickbuf.ProtoSource;\r\n-import us.hebi.quickbuf.Utf8String;\r\n \r\n public final class Notify {\r\n-\r\n-    public static final class RevcMsgScNotify\r\n-            extends ProtoMessage<RevcMsgScNotify>\r\n-            implements Cloneable {\r\n+    public static final class RevcMsgScNotify extends ProtoMessage<RevcMsgScNotify> implements Cloneable {\r\n         private static final long serialVersionUID = 0L;\r\n-        private final Msg msg = Msg.newInstance();\r\n+        private final Msg msg;\r\n \r\n         private RevcMsgScNotify() {\r\n+            this.msg = Msg.newInstance();\r\n         }\r\n \r\n         public static RevcMsgScNotify newInstance() {\r\n             return new RevcMsgScNotify();\r\n         }\r\n \r\n         public boolean hasMsg() {\r\n-            return (this.bitField0_ & 1) != 0;\r\n+            return (this.bitField0_ & 0x1) != 0x0;\r\n         }\r\n \r\n         public RevcMsgScNotify clearMsg() {\r\n             this.bitField0_ &= 0xFFFFFFFE;\r\n@@ -42,30 +40,30 @@\n             return this.msg;\r\n         }\r\n \r\n         public Msg getMutableMsg() {\r\n-            this.bitField0_ |= 1;\r\n+            this.bitField0_ |= 0x1;\r\n             return this.msg;\r\n         }\r\n \r\n-        public RevcMsgScNotify setMsg(Msg msg) {\r\n-            this.bitField0_ |= 1;\r\n+        public RevcMsgScNotify setMsg(final Msg msg) {\r\n+            this.bitField0_ |= 0x1;\r\n             this.msg.copyFrom(msg);\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public RevcMsgScNotify copyFrom(RevcMsgScNotify revcMsgScNotify) {\r\n+        public RevcMsgScNotify copyFrom(final RevcMsgScNotify revcMsgScNotify) {\r\n             this.cachedSize = revcMsgScNotify.cachedSize;\r\n-            if ((this.bitField0_ | revcMsgScNotify.bitField0_) != 0) {\r\n+            if ((this.bitField0_ | revcMsgScNotify.bitField0_) != 0x0) {\r\n                 this.bitField0_ = revcMsgScNotify.bitField0_;\r\n                 this.msg.copyFrom(revcMsgScNotify.msg);\r\n             }\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public RevcMsgScNotify mergeFrom(RevcMsgScNotify revcMsgScNotify) {\r\n+        public RevcMsgScNotify mergeFrom(final RevcMsgScNotify revcMsgScNotify) {\r\n             if (revcMsgScNotify.isEmpty()) {\r\n                 return this;\r\n             }\r\n             this.cachedSize = -1;\r\n@@ -97,89 +95,99 @@\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public boolean equals(Object object) {\r\n-            if (object == this) {\r\n+        public boolean equals(final Object o) {\r\n+            if (o == this) {\r\n                 return true;\r\n             }\r\n-            if (!(object instanceof RevcMsgScNotify)) {\r\n+            if (!(o instanceof RevcMsgScNotify)) {\r\n                 return false;\r\n             }\r\n-            RevcMsgScNotify revcMsgScNotify = (RevcMsgScNotify) object;\r\n+            final RevcMsgScNotify revcMsgScNotify = (RevcMsgScNotify) o;\r\n             return this.bitField0_ == revcMsgScNotify.bitField0_\r\n                     && (!this.hasMsg() || this.msg.equals(revcMsgScNotify.msg));\r\n         }\r\n \r\n         @Override\r\n-        public void writeTo(ProtoSink protoSink) throws IOException {\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+        public void writeTo(final ProtoSink protoSink) throws IOException {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 50);\r\n                 protoSink.writeMessageNoTag(this.msg);\r\n             }\r\n         }\r\n \r\n         @Override\r\n         protected int computeSerializedSize() {\r\n             int n = 0;\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 n += 1 + ProtoSink.computeMessageSizeNoTag(this.msg);\r\n             }\r\n             return n;\r\n         }\r\n \r\n         @Override\r\n-        public RevcMsgScNotify mergeFrom(ProtoSource protoSource) throws IOException {\r\n+        public RevcMsgScNotify mergeFrom(final ProtoSource protoSource) throws IOException {\r\n             int n = protoSource.readTag();\r\n-            block4: while (true) {\r\n+            Label_0062: while (true) {\r\n                 switch (n) {\r\n                     case 50: {\r\n                         protoSource.readMessage(this.msg);\r\n-                        this.bitField0_ |= 1;\r\n+                        this.bitField0_ |= 0x1;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 0)\r\n-                            continue block4;\r\n+                        if (n != 0) {\r\n+                            continue;\r\n+                        }\r\n+                        break Label_0062;\r\n                     }\r\n                     case 0: {\r\n-                        return this;\r\n+                        break Label_0062;\r\n                     }\r\n+                    default: {\r\n+                        if (!protoSource.skipField(n)) {\r\n+                            return this;\r\n+                        }\r\n+                        n = protoSource.readTag();\r\n+                        continue;\r\n+                    }\r\n                 }\r\n-                if (!protoSource.skipField(n)) {\r\n-                    return this;\r\n-                }\r\n-                n = protoSource.readTag();\r\n             }\r\n+            return this;\r\n         }\r\n \r\n         @Override\r\n-        public void writeTo(JsonSink jsonSink) throws IOException {\r\n+        public void writeTo(final JsonSink jsonSink) throws IOException {\r\n             jsonSink.beginObject();\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 jsonSink.writeMessage(FieldNames.msg, this.msg);\r\n             }\r\n             jsonSink.endObject();\r\n         }\r\n \r\n         @Override\r\n-        public RevcMsgScNotify mergeFrom(JsonSource jsonSource) throws IOException {\r\n+        public RevcMsgScNotify mergeFrom(final JsonSource jsonSource) throws IOException {\r\n             if (!jsonSource.beginObject()) {\r\n                 return this;\r\n             }\r\n-            block3: while (!jsonSource.isAtEnd()) {\r\n+            while (!jsonSource.isAtEnd()) {\r\n                 switch (jsonSource.readFieldHash()) {\r\n                     case 108417: {\r\n-                        if (jsonSource.isAtField(FieldNames.msg)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block3;\r\n-                            jsonSource.readMessage(this.msg);\r\n-                            this.bitField0_ |= 1;\r\n-                            continue block3;\r\n+                        if (!jsonSource.isAtField(FieldNames.msg)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        jsonSource.readMessage(this.msg);\r\n+                        this.bitField0_ |= 0x1;\r\n+                        continue;\r\n+                    }\r\n+                    default: {\r\n                         jsonSource.skipUnknownField();\r\n-                        continue block3;\r\n+                        continue;\r\n                     }\r\n                 }\r\n-                jsonSource.skipUnknownField();\r\n             }\r\n             jsonSource.endObject();\r\n             return this;\r\n         }\r\n@@ -193,32 +201,33 @@\n         public boolean isEmpty() {\r\n             return this.bitField0_ == 0;\r\n         }\r\n \r\n-        public static RevcMsgScNotify parseFrom(byte[] byArray) throws InvalidProtocolBufferException {\r\n-            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), byArray).checkInitialized();\r\n+        public static RevcMsgScNotify parseFrom(final byte[] array) throws InvalidProtocolBufferException {\r\n+            return ProtoMessage.mergeFrom(new RevcMsgScNotify(), array).checkInitialized();\r\n         }\r\n \r\n-        public static RevcMsgScNotify parseFrom(ProtoSource protoSource) throws IOException {\r\n-            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), protoSource).checkInitialized();\r\n+        public static RevcMsgScNotify parseFrom(final ProtoSource protoSource) throws IOException {\r\n+            return ProtoMessage.mergeFrom(new RevcMsgScNotify(), protoSource).checkInitialized();\r\n         }\r\n \r\n-        public static RevcMsgScNotify parseFrom(JsonSource jsonSource) throws IOException {\r\n-            return (RevcMsgScNotify) ProtoMessage.mergeFrom(new RevcMsgScNotify(), jsonSource).checkInitialized();\r\n+        public static RevcMsgScNotify parseFrom(final JsonSource jsonSource) throws IOException {\r\n+            return ProtoMessage.mergeFrom(new RevcMsgScNotify(), jsonSource).checkInitialized();\r\n         }\r\n \r\n         public static MessageFactory<RevcMsgScNotify> getFactory() {\r\n             return RevcMsgScNotifyFactory.INSTANCE;\r\n         }\r\n \r\n         static class FieldNames {\r\n-            static final FieldName msg = FieldName.forField(\"msg\");\r\n+            static final FieldName msg;\r\n \r\n-            FieldNames() {\r\n+            static {\r\n+                msg = FieldName.forField(\"msg\");\r\n             }\r\n         }\r\n \r\n-        private static enum RevcMsgScNotifyFactory implements MessageFactory<RevcMsgScNotify> {\r\n+        private enum RevcMsgScNotifyFactory implements MessageFactory<RevcMsgScNotify> {\r\n             INSTANCE;\r\n \r\n             @Override\r\n             public RevcMsgScNotify create() {\r\n@@ -226,27 +235,26 @@\n             }\r\n         }\r\n     }\r\n \r\n-    public static final class Msg\r\n-            extends ProtoMessage<Msg>\r\n-            implements Cloneable {\r\n+    public static final class Msg extends ProtoMessage<Msg> implements Cloneable {\r\n         private static final long serialVersionUID = 0L;\r\n         private long i9;\r\n         private int i3;\r\n         private int i11;\r\n         private int i15;\r\n-        private final Utf8String text = Utf8String.newEmptyInstance();\r\n+        private final Utf8String text;\r\n \r\n         private Msg() {\r\n+            this.text = Utf8String.newEmptyInstance();\r\n         }\r\n \r\n         public static Msg newInstance() {\r\n             return new Msg();\r\n         }\r\n \r\n         public boolean hasI9() {\r\n-            return (this.bitField0_ & 1) != 0;\r\n+            return (this.bitField0_ & 0x1) != 0x0;\r\n         }\r\n \r\n         public Msg clearI9() {\r\n             this.bitField0_ &= 0xFFFFFFFE;\r\n@@ -257,16 +265,16 @@\n         public long getI9() {\r\n             return this.i9;\r\n         }\r\n \r\n-        public Msg setI9(long l) {\r\n-            this.bitField0_ |= 1;\r\n-            this.i9 = l;\r\n+        public Msg setI9(final long i9) {\r\n+            this.bitField0_ |= 0x1;\r\n+            this.i9 = i9;\r\n             return this;\r\n         }\r\n \r\n         public boolean hasI3() {\r\n-            return (this.bitField0_ & 2) != 0;\r\n+            return (this.bitField0_ & 0x2) != 0x0;\r\n         }\r\n \r\n         public Msg clearI3() {\r\n             this.bitField0_ &= 0xFFFFFFFD;\r\n@@ -277,16 +285,16 @@\n         public int getI3() {\r\n             return this.i3;\r\n         }\r\n \r\n-        public Msg setI3(int n) {\r\n-            this.bitField0_ |= 2;\r\n-            this.i3 = n;\r\n+        public Msg setI3(final int i3) {\r\n+            this.bitField0_ |= 0x2;\r\n+            this.i3 = i3;\r\n             return this;\r\n         }\r\n \r\n         public boolean hasI11() {\r\n-            return (this.bitField0_ & 4) != 0;\r\n+            return (this.bitField0_ & 0x4) != 0x0;\r\n         }\r\n \r\n         public Msg clearI11() {\r\n             this.bitField0_ &= 0xFFFFFFFB;\r\n@@ -297,16 +305,16 @@\n         public int getI11() {\r\n             return this.i11;\r\n         }\r\n \r\n-        public Msg setI11(int n) {\r\n-            this.bitField0_ |= 4;\r\n-            this.i11 = n;\r\n+        public Msg setI11(final int i11) {\r\n+            this.bitField0_ |= 0x4;\r\n+            this.i11 = i11;\r\n             return this;\r\n         }\r\n \r\n         public boolean hasI15() {\r\n-            return (this.bitField0_ & 8) != 0;\r\n+            return (this.bitField0_ & 0x8) != 0x0;\r\n         }\r\n \r\n         public Msg clearI15() {\r\n             this.bitField0_ &= 0xFFFFFFF7;\r\n@@ -317,16 +325,16 @@\n         public int getI15() {\r\n             return this.i15;\r\n         }\r\n \r\n-        public Msg setI15(int n) {\r\n-            this.bitField0_ |= 8;\r\n-            this.i15 = n;\r\n+        public Msg setI15(final int i15) {\r\n+            this.bitField0_ |= 0x8;\r\n+            this.i15 = i15;\r\n             return this;\r\n         }\r\n \r\n         public boolean hasText() {\r\n-            return (this.bitField0_ & 0x10) != 0;\r\n+            return (this.bitField0_ & 0x10) != 0x0;\r\n         }\r\n \r\n         public Msg clearText() {\r\n             this.bitField0_ &= 0xFFFFFFEF;\r\n@@ -346,24 +354,24 @@\n             this.bitField0_ |= 0x10;\r\n             return this.text;\r\n         }\r\n \r\n-        public Msg setText(CharSequence charSequence) {\r\n+        public Msg setText(final CharSequence charSequence) {\r\n             this.bitField0_ |= 0x10;\r\n             this.text.copyFrom(charSequence);\r\n             return this;\r\n         }\r\n \r\n-        public Msg setText(Utf8String utf8String) {\r\n+        public Msg setText(final Utf8String utf8String) {\r\n             this.bitField0_ |= 0x10;\r\n             this.text.copyFrom(utf8String);\r\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public Msg copyFrom(Msg msg) {\r\n+        public Msg copyFrom(final Msg msg) {\r\n             this.cachedSize = msg.cachedSize;\r\n-            if ((this.bitField0_ | msg.bitField0_) != 0) {\r\n+            if ((this.bitField0_ | msg.bitField0_) != 0x0) {\r\n                 this.bitField0_ = msg.bitField0_;\r\n                 this.i9 = msg.i9;\r\n                 this.i3 = msg.i3;\r\n                 this.i11 = msg.i11;\r\n@@ -373,9 +381,9 @@\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public Msg mergeFrom(Msg msg) {\r\n+        public Msg mergeFrom(final Msg msg) {\r\n             if (msg.isEmpty()) {\r\n                 return this;\r\n             }\r\n             this.cachedSize = -1;\r\n@@ -423,202 +431,220 @@\n             return this;\r\n         }\r\n \r\n         @Override\r\n-        public boolean equals(Object object) {\r\n-            if (object == this) {\r\n+        public boolean equals(final Object o) {\r\n+            if (o == this) {\r\n                 return true;\r\n             }\r\n-            if (!(object instanceof Msg)) {\r\n+            if (!(o instanceof Msg)) {\r\n                 return false;\r\n             }\r\n-            Msg msg = (Msg) object;\r\n-            return !(this.bitField0_ != msg.bitField0_ || this.hasI9() && this.i9 != msg.i9\r\n-                    || this.hasI3() && this.i3 != msg.i3 || this.hasI11() && this.i11 != msg.i11\r\n-                    || this.hasI15() && this.i15 != msg.i15 || this.hasText() && !this.text.equals(msg.text));\r\n+            final Msg msg = (Msg) o;\r\n+            return this.bitField0_ == msg.bitField0_ && (!this.hasI9() || this.i9 == msg.i9)\r\n+                    && (!this.hasI3() || this.i3 == msg.i3) && (!this.hasI11() || this.i11 == msg.i11)\r\n+                    && (!this.hasI15() || this.i15 == msg.i15) && (!this.hasText() || this.text.equals(msg.text));\r\n         }\r\n \r\n         @Override\r\n-        public void writeTo(ProtoSink protoSink) throws IOException {\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+        public void writeTo(final ProtoSink protoSink) throws IOException {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 72);\r\n                 protoSink.writeUInt64NoTag(this.i9);\r\n             }\r\n-            if ((this.bitField0_ & 2) != 0) {\r\n+            if ((this.bitField0_ & 0x2) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 24);\r\n                 protoSink.writeUInt32NoTag(this.i3);\r\n             }\r\n-            if ((this.bitField0_ & 4) != 0) {\r\n+            if ((this.bitField0_ & 0x4) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 88);\r\n                 protoSink.writeUInt32NoTag(this.i11);\r\n             }\r\n-            if ((this.bitField0_ & 8) != 0) {\r\n+            if ((this.bitField0_ & 0x8) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 120);\r\n                 protoSink.writeUInt32NoTag(this.i15);\r\n             }\r\n-            if ((this.bitField0_ & 0x10) != 0) {\r\n+            if ((this.bitField0_ & 0x10) != 0x0) {\r\n                 protoSink.writeRawByte((byte) 34);\r\n                 protoSink.writeStringNoTag(this.text);\r\n             }\r\n         }\r\n \r\n         @Override\r\n         protected int computeSerializedSize() {\r\n             int n = 0;\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 n += 1 + ProtoSink.computeUInt64SizeNoTag(this.i9);\r\n             }\r\n-            if ((this.bitField0_ & 2) != 0) {\r\n+            if ((this.bitField0_ & 0x2) != 0x0) {\r\n                 n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i3);\r\n             }\r\n-            if ((this.bitField0_ & 4) != 0) {\r\n+            if ((this.bitField0_ & 0x4) != 0x0) {\r\n                 n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i11);\r\n             }\r\n-            if ((this.bitField0_ & 8) != 0) {\r\n+            if ((this.bitField0_ & 0x8) != 0x0) {\r\n                 n += 1 + ProtoSink.computeUInt32SizeNoTag(this.i15);\r\n             }\r\n-            if ((this.bitField0_ & 0x10) != 0) {\r\n+            if ((this.bitField0_ & 0x10) != 0x0) {\r\n                 n += 1 + ProtoSink.computeStringSizeNoTag(this.text);\r\n             }\r\n             return n;\r\n         }\r\n \r\n         @Override\r\n-        public Msg mergeFrom(ProtoSource protoSource) throws IOException {\r\n+        public Msg mergeFrom(final ProtoSource protoSource) throws IOException {\r\n             int n = protoSource.readTag();\r\n-            block8: while (true) {\r\n+            Label_0224: while (true) {\r\n                 switch (n) {\r\n                     case 72: {\r\n                         this.i9 = protoSource.readUInt64();\r\n-                        this.bitField0_ |= 1;\r\n+                        this.bitField0_ |= 0x1;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 24)\r\n-                            continue block8;\r\n+                        if (n != 24) {\r\n+                            continue;\r\n+                        }\r\n                     }\r\n                     case 24: {\r\n                         this.i3 = protoSource.readUInt32();\r\n-                        this.bitField0_ |= 2;\r\n+                        this.bitField0_ |= 0x2;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 88)\r\n-                            continue block8;\r\n+                        if (n != 88) {\r\n+                            continue;\r\n+                        }\r\n                     }\r\n                     case 88: {\r\n                         this.i11 = protoSource.readUInt32();\r\n-                        this.bitField0_ |= 4;\r\n+                        this.bitField0_ |= 0x4;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 120)\r\n-                            continue block8;\r\n+                        if (n != 120) {\r\n+                            continue;\r\n+                        }\r\n                     }\r\n                     case 120: {\r\n                         this.i15 = protoSource.readUInt32();\r\n-                        this.bitField0_ |= 8;\r\n+                        this.bitField0_ |= 0x8;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 34)\r\n-                            continue block8;\r\n+                        if (n != 34) {\r\n+                            continue;\r\n+                        }\r\n                     }\r\n                     case 34: {\r\n                         protoSource.readString(this.text);\r\n                         this.bitField0_ |= 0x10;\r\n                         n = protoSource.readTag();\r\n-                        if (n != 0)\r\n-                            continue block8;\r\n+                        if (n != 0) {\r\n+                            continue;\r\n+                        }\r\n+                        break Label_0224;\r\n                     }\r\n                     case 0: {\r\n-                        return this;\r\n+                        break Label_0224;\r\n                     }\r\n+                    default: {\r\n+                        if (!protoSource.skipField(n)) {\r\n+                            return this;\r\n+                        }\r\n+                        n = protoSource.readTag();\r\n+                        continue;\r\n+                    }\r\n                 }\r\n-                if (!protoSource.skipField(n)) {\r\n-                    return this;\r\n-                }\r\n-                n = protoSource.readTag();\r\n             }\r\n+            return this;\r\n         }\r\n \r\n         @Override\r\n-        public void writeTo(JsonSink jsonSink) throws IOException {\r\n+        public void writeTo(final JsonSink jsonSink) throws IOException {\r\n             jsonSink.beginObject();\r\n-            if ((this.bitField0_ & 1) != 0) {\r\n+            if ((this.bitField0_ & 0x1) != 0x0) {\r\n                 jsonSink.writeUInt64(FieldNames.i9, this.i9);\r\n             }\r\n-            if ((this.bitField0_ & 2) != 0) {\r\n+            if ((this.bitField0_ & 0x2) != 0x0) {\r\n                 jsonSink.writeUInt32(FieldNames.i3, this.i3);\r\n             }\r\n-            if ((this.bitField0_ & 4) != 0) {\r\n+            if ((this.bitField0_ & 0x4) != 0x0) {\r\n                 jsonSink.writeUInt32(FieldNames.i11, this.i11);\r\n             }\r\n-            if ((this.bitField0_ & 8) != 0) {\r\n+            if ((this.bitField0_ & 0x8) != 0x0) {\r\n                 jsonSink.writeUInt32(FieldNames.i15, this.i15);\r\n             }\r\n-            if ((this.bitField0_ & 0x10) != 0) {\r\n+            if ((this.bitField0_ & 0x10) != 0x0) {\r\n                 jsonSink.writeString(FieldNames.text, this.text);\r\n             }\r\n             jsonSink.endObject();\r\n         }\r\n \r\n         @Override\r\n-        public Msg mergeFrom(JsonSource jsonSource) throws IOException {\r\n+        public Msg mergeFrom(final JsonSource jsonSource) throws IOException {\r\n             if (!jsonSource.beginObject()) {\r\n                 return this;\r\n             }\r\n-            block7: while (!jsonSource.isAtEnd()) {\r\n+            while (!jsonSource.isAtEnd()) {\r\n                 switch (jsonSource.readFieldHash()) {\r\n                     case 3312: {\r\n-                        if (jsonSource.isAtField(FieldNames.i9)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block7;\r\n-                            this.i9 = jsonSource.readUInt64();\r\n-                            this.bitField0_ |= 1;\r\n-                            continue block7;\r\n+                        if (!jsonSource.isAtField(FieldNames.i9)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n-                        jsonSource.skipUnknownField();\r\n-                        continue block7;\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        this.i9 = jsonSource.readUInt64();\r\n+                        this.bitField0_ |= 0x1;\r\n+                        continue;\r\n                     }\r\n                     case 3306: {\r\n-                        if (jsonSource.isAtField(FieldNames.i3)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block7;\r\n-                            this.i3 = jsonSource.readUInt32();\r\n-                            this.bitField0_ |= 2;\r\n-                            continue block7;\r\n+                        if (!jsonSource.isAtField(FieldNames.i3)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n-                        jsonSource.skipUnknownField();\r\n-                        continue block7;\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        this.i3 = jsonSource.readUInt32();\r\n+                        this.bitField0_ |= 0x2;\r\n+                        continue;\r\n                     }\r\n                     case 102473: {\r\n-                        if (jsonSource.isAtField(FieldNames.i11)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block7;\r\n-                            this.i11 = jsonSource.readUInt32();\r\n-                            this.bitField0_ |= 4;\r\n-                            continue block7;\r\n+                        if (!jsonSource.isAtField(FieldNames.i11)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n-                        jsonSource.skipUnknownField();\r\n-                        continue block7;\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        this.i11 = jsonSource.readUInt32();\r\n+                        this.bitField0_ |= 0x4;\r\n+                        continue;\r\n                     }\r\n                     case 102477: {\r\n-                        if (jsonSource.isAtField(FieldNames.i15)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block7;\r\n-                            this.i15 = jsonSource.readUInt32();\r\n-                            this.bitField0_ |= 8;\r\n-                            continue block7;\r\n+                        if (!jsonSource.isAtField(FieldNames.i15)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n-                        jsonSource.skipUnknownField();\r\n-                        continue block7;\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        this.i15 = jsonSource.readUInt32();\r\n+                        this.bitField0_ |= 0x8;\r\n+                        continue;\r\n                     }\r\n                     case 3556653: {\r\n-                        if (jsonSource.isAtField(FieldNames.text)) {\r\n-                            if (jsonSource.trySkipNullValue())\r\n-                                continue block7;\r\n-                            jsonSource.readString(this.text);\r\n-                            this.bitField0_ |= 0x10;\r\n-                            continue block7;\r\n+                        if (!jsonSource.isAtField(FieldNames.text)) {\r\n+                            jsonSource.skipUnknownField();\r\n+                            continue;\r\n                         }\r\n+                        if (jsonSource.trySkipNullValue()) {\r\n+                            continue;\r\n+                        }\r\n+                        jsonSource.readString(this.text);\r\n+                        this.bitField0_ |= 0x10;\r\n+                        continue;\r\n+                    }\r\n+                    default: {\r\n                         jsonSource.skipUnknownField();\r\n-                        continue block7;\r\n+                        continue;\r\n                     }\r\n                 }\r\n-                jsonSource.skipUnknownField();\r\n             }\r\n             jsonSource.endObject();\r\n             return this;\r\n         }\r\n@@ -632,36 +658,41 @@\n         public boolean isEmpty() {\r\n             return this.bitField0_ == 0;\r\n         }\r\n \r\n-        public static Msg parseFrom(byte[] byArray) throws InvalidProtocolBufferException {\r\n-            return (Msg) ProtoMessage.mergeFrom(new Msg(), byArray).checkInitialized();\r\n+        public static Msg parseFrom(final byte[] array) throws InvalidProtocolBufferException {\r\n+            return ProtoMessage.mergeFrom(new Msg(), array).checkInitialized();\r\n         }\r\n \r\n-        public static Msg parseFrom(ProtoSource protoSource) throws IOException {\r\n-            return (Msg) ProtoMessage.mergeFrom(new Msg(), protoSource).checkInitialized();\r\n+        public static Msg parseFrom(final ProtoSource protoSource) throws IOException {\r\n+            return ProtoMessage.mergeFrom(new Msg(), protoSource).checkInitialized();\r\n         }\r\n \r\n-        public static Msg parseFrom(JsonSource jsonSource) throws IOException {\r\n-            return (Msg) ProtoMessage.mergeFrom(new Msg(), jsonSource).checkInitialized();\r\n+        public static Msg parseFrom(final JsonSource jsonSource) throws IOException {\r\n+            return ProtoMessage.mergeFrom(new Msg(), jsonSource).checkInitialized();\r\n         }\r\n \r\n         public static MessageFactory<Msg> getFactory() {\r\n             return MsgFactory.INSTANCE;\r\n         }\r\n \r\n         static class FieldNames {\r\n-            static final FieldName i9 = FieldName.forField(\"i9\");\r\n-            static final FieldName i3 = FieldName.forField(\"i3\");\r\n-            static final FieldName i11 = FieldName.forField(\"i11\");\r\n-            static final FieldName i15 = FieldName.forField(\"i15\");\r\n-            static final FieldName text = FieldName.forField(\"text\");\r\n+            static final FieldName i9;\r\n+            static final FieldName i3;\r\n+            static final FieldName i11;\r\n+            static final FieldName i15;\r\n+            static final FieldName text;\r\n \r\n-            FieldNames() {\r\n+            static {\r\n+                i9 = FieldName.forField(\"i9\");\r\n+                i3 = FieldName.forField(\"i3\");\r\n+                i11 = FieldName.forField(\"i11\");\r\n+                i15 = FieldName.forField(\"i15\");\r\n+                text = FieldName.forField(\"text\");\r\n             }\r\n         }\r\n \r\n-        private static enum MsgFactory implements MessageFactory<Msg> {\r\n+        private enum MsgFactory implements MessageFactory<Msg> {\r\n             INSTANCE;\r\n \r\n             @Override\r\n             public Msg create() {\r\n"
                },
                {
                    "date": 1719137522126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-// Decompiled with: Procyon 0.6.0\r\n-// Class Version: 17\r\n+\r\n package emu.lunarcore.proto;\r\n \r\n import us.hebi.quickbuf.Utf8String;\r\n import us.hebi.quickbuf.FieldName;\r\n"
                },
                {
                    "date": 1719137536052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n package emu.lunarcore.proto;\r\n \r\n import us.hebi.quickbuf.Utf8String;\r\n import us.hebi.quickbuf.FieldName;\r\n"
                },
                {
                    "date": 1719137542344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import us.hebi.quickbuf.JsonSink;\r\n import us.hebi.quickbuf.ProtoSource;\r\n import java.io.IOException;\r\n import us.hebi.quickbuf.ProtoSink;\r\n-import us.hebi.quickbuf.ProtoMessage;s\r\n+import us.hebi.quickbuf.ProtoMessage;\r\n \r\n public final class Notify {\r\n     public static final class RevcMsgScNotify extends ProtoMessage<RevcMsgScNotify> implements Cloneable {\r\n         private static final long serialVersionUID = 0L;\r\n"
                }
            ],
            "date": 1719130683533,
            "name": "Commit-0",
            "content": "package emu.lunarcore.proto;\r\n\r\npublic class Notify {\r\n\r\n}\r\n"
        }
    ]
}