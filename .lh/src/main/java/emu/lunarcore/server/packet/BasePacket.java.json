{
    "sourceFile": "src/main/java/emu/lunarcore/server/packet/BasePacket.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1719135829589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1719135829589,
            "name": "Commit-0",
            "content": "package emu.lunarcore.server.packet;\n\nimport java.io.IOException;\n\nimport emu.lunarcore.util.Utils;\nimport lombok.Getter;\nimport us.hebi.quickbuf.ProtoMessage;\nimport us.hebi.quickbuf.ProtoSink;\nimport us.hebi.quickbuf.ProtoSource;\n\n@Getter\npublic class BasePacket {\n    public static final int HEADER_CONST = 0x9d74c714;\n    public static final int TAIL_CONST = 0xd7a152c8;\n\n    protected int cmdId;\n    private ProtoMessage<?> data;\n\n    public BasePacket(int cmdId) {\n        this.cmdId = cmdId;\n    }\n    \n    public void setCmdId(int cmdId) {\n        this.cmdId = cmdId;\n    }\n    \n    public void setData(byte[] data) {\n        this.data = new RawProto(data);\n    }\n\n    public void setData(ProtoMessage<?> proto) {\n        this.data = proto;\n    }\n\n    public byte[] build() {\n        // Setup\n        int protoSize = 0;\n        \n        // Set proto message size\n        if (this.data != null) {\n            protoSize = this.data.getSerializedSize();\n        }\n        \n        // Create proto sink\n        byte[] packet = new byte[16 + protoSize];\n        ProtoSink output = ProtoSink.newInstance(packet, 0, packet.length);\n        \n        try {\n            // Write packet header\n            this.writeUint32(output, HEADER_CONST);\n            this.writeUint16(output, cmdId);\n            this.writeUint16(output, 0);\n            this.writeUint32(output, protoSize);\n            \n            // Write protobuf message\n            if (this.data != null) {\n                this.data.writeTo(output);\n            }\n            \n            // Write packet footer\n            this.writeUint32(output, TAIL_CONST);\n        } catch (Exception e) {\n            // Should never happen\n        }\n\n        return packet;\n    }\n\n    private void writeUint16(ProtoSink out, int i) throws Exception {\n        // Unsigned short\n        out.writeRawByte((byte) ((i >>> 8) & 0xFF));\n        out.writeRawByte((byte) (i & 0xFF));\n    }\n\n    private void writeUint32(ProtoSink out, int i) throws Exception {\n        // Unsigned int (long)\n        out.writeRawByte((byte) ((i >>> 24) & 0xFF));\n        out.writeRawByte((byte) ((i >>> 16) & 0xFF));\n        out.writeRawByte((byte) ((i >>> 8) & 0xFF));\n        out.writeRawByte((byte) (i & 0xFF));\n    }\n    \n    /**\n     * A byte array wrapped in a ProtoMessage object\n     */\n    @SuppressWarnings(\"rawtypes\")\n    private static class RawProto extends ProtoMessage {\n        private byte[] data;\n        \n        public RawProto(byte[] data) {\n            this.data = data;\n        }\n        \n        @Override\n        public ProtoMessage copyFrom(ProtoMessage other) {\n            data = other.toByteArray();\n            return this;\n        }\n        \n        @Override\n        public ProtoMessage clear() {\n            data = Utils.EMPTY_BYTE_ARRAY;\n            return this;\n        }\n\n        @Override\n        protected int computeSerializedSize() {\n            return data.length;\n        }\n\n        @Override\n        public void writeTo(ProtoSink output) throws IOException {\n            output.writeRawBytes(data);\n        }\n\n        @Override\n        public ProtoMessage mergeFrom(ProtoSource input) throws IOException {\n            return this; // Skip\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            return false; // Skip\n        }\n\n        @Override\n        public ProtoMessage clone() {\n            return null; // Skip\n        }\n        \n    }\n}\n"
        }
    ]
}