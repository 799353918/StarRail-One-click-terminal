{
    "sourceFile": "src/main/java/emu/lunarcore/server/game/GameServer.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1719130112139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719130122479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         System.gc();\n \n         // Done\n         LunarCore.getLogger().info(\"CarolBcsi Game Server started on \" + address.getPort());\n-        LunarCore.getLogger().warn(\"LUNARCORE IS A FREE SOFTWARE. IF YOU PAID FOR IT, YOU HAVE BEEN SCAMMED!\"); // DO NOT REMOVE. Anti-seller\n+        LunarCore.getLogger().warn(\"C IS A FREE SOFTWARE. IF YOU PAID FOR IT, YOU HAVE BEEN SCAMMED!\"); // DO NOT REMOVE. Anti-seller\n     }\n     \n     private void onTick() {\n         long timestamp = System.currentTimeMillis();\n"
                },
                {
                    "date": 1719130139865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         System.gc();\n \n         // Done\n         LunarCore.getLogger().info(\"CarolBcsi Game Server started on \" + address.getPort());\n-        LunarCore.getLogger().warn(\"CarolBcsi Game Server IS A FREE SOFTWARE. IF YOU PAID FOR IT, YOU HAVE BEEN SCAMMED!\"); // DO NOT REMOVE. Anti-seller\n+        LunarCore.getLogger().warn(\"CarolBcsi Game Server 是一款免费软件。如果你付了钱，你就被骗了！\"); // DO NOT REMOVE. Anti-seller\n     }\n     \n     private void onTick() {\n         long timestamp = System.currentTimeMillis();\n"
                }
            ],
            "date": 1719130112139,
            "name": "Commit-0",
            "content": "package emu.lunarcore.server.game;\n\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport emu.lunarcore.Config.GameServerConfig;\nimport emu.lunarcore.LunarCore;\nimport emu.lunarcore.game.battle.BattleService;\nimport emu.lunarcore.game.drops.DropService;\nimport emu.lunarcore.game.gacha.GachaService;\nimport emu.lunarcore.game.inventory.InventoryService;\nimport emu.lunarcore.game.player.Player;\nimport emu.lunarcore.game.shop.ShopService;\nimport it.unimi.dsi.fastutil.ints.Int2ObjectMap;\nimport it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\nimport kcp.highway.ChannelConfig;\nimport kcp.highway.KcpServer;\nimport lombok.Getter;\n\npublic class GameServer extends KcpServer {\n    private final InetSocketAddress address;\n    private final GameServerConfig serverConfig;\n    private final RegionInfo info;\n    \n    private final Int2ObjectMap<Player> players;\n    private final Timer gameLoopTimer;\n    private long lastTickTime;\n    \n    // Managers\n    @Getter private final GameServerPacketHandler packetHandler;\n    @Getter private final GameServerPacketCache packetCache;\n    \n    @Getter private final BattleService battleService;\n    @Getter private final DropService dropService;\n    @Getter private final InventoryService inventoryService;\n    @Getter private final GachaService gachaService;\n    @Getter private final ShopService shopService;\n\n    public GameServer(GameServerConfig serverConfig) {\n        // Game Server base\n        this.serverConfig = serverConfig;\n        this.info = new RegionInfo(this);\n        this.address = new InetSocketAddress(serverConfig.getBindAddress(), serverConfig.getBindPort());\n        this.players = new Int2ObjectOpenHashMap<>();\n\n        // Setup managers\n        this.packetHandler = new GameServerPacketHandler();\n        this.packetCache = new GameServerPacketCache();\n        \n        this.battleService = new BattleService(this);\n        this.dropService = new DropService(this);\n        this.inventoryService = new InventoryService(this);\n        this.gachaService = new GachaService(this);\n        this.shopService = new ShopService(this);\n        \n        // Game loop\n        this.lastTickTime = System.currentTimeMillis();\n        this.gameLoopTimer = new Timer();\n        this.gameLoopTimer.scheduleAtFixedRate(new TimerTask() {\n            @Override\n            public void run() {\n                onTick();\n            }\n        }, 0, 1000);\n    }\n\n    public GameServerConfig getServerConfig() {\n        return this.serverConfig;\n    }\n    \n    public int getPlayerCount() {\n        synchronized (this.players) {\n            return this.players.size();\n        }\n    }\n\n    public void registerPlayer(Player player) {\n        synchronized (this.players) {\n            this.players.put(player.getUid(), player);\n        }\n    }\n    \n    public void deregisterPlayer(Player player) {\n        synchronized (this.players) {\n            Player check = this.players.get(player.getUid());\n            if (check == player) {\n                this.players.remove(player.getUid());\n            }\n        }\n    }\n    \n    public Player getPlayerByUid(int uid, boolean allowOffline) {\n        Player target = null;\n        \n        // Get player if online\n        synchronized (this.players) {\n            target = this.players.get(uid);\n        }\n        \n        // Player is not online, but we arent requesting an online one\n        if (target == null && allowOffline) {\n            target = LunarCore.getGameDatabase().getObjectByUid(Player.class, uid);\n        }\n        \n        return target;\n    }\n\n    public Player getOnlinePlayerByUid(int uid) {\n        return this.getPlayerByUid(uid, false);\n    }\n    \n    public Player getOnlinePlayerByAccountId(String accountUid) {\n        synchronized (this.players) {\n            return this.players.values()\n                    .stream()\n                    .filter(p -> accountUid.equals(p.getAccountUid()))\n                    .findFirst()\n                    .orElse(null);\n        }\n    }\n    \n    public List<Player> getRandomOnlinePlayers(int amount, Player filter) {\n        List<Player> list = new ArrayList<>();\n        \n        synchronized (this.players) {\n            var iterator = this.players.values().iterator();\n            \n            while (iterator.hasNext() && list.size() < amount) {\n                Player player = iterator.next();\n                \n                if (player != filter) {\n                    list.add(player);\n                }\n            }\n        }\n        \n        return list;\n    }\n    \n    public boolean deletePlayer(String accountUid) {\n        // Check if player exists\n        Player player = this.getOnlinePlayerByAccountId(accountUid);\n\n        // Try to get player from database\n        if (player == null) {\n            player = LunarCore.getGameDatabase().getObjectByField(Player.class, \"accountUid\", accountUid);\n            if (player == null) return false;\n        }\n        \n        // Delete the player\n        player.delete();\n        return true;\n    }\n\n    public void start() {\n        // Setup config and init server\n        ChannelConfig channelConfig = new ChannelConfig();\n        channelConfig.nodelay(true, getServerConfig().getKcpInterval(), 2, true);\n        channelConfig.setMtu(1400);\n        channelConfig.setSndwnd(256);\n        channelConfig.setRcvwnd(256);\n        channelConfig.setTimeoutMillis(getServerConfig().getKcpTimeout() * 1000);\n        channelConfig.setUseConvChannel(true);\n        channelConfig.setAckNoDelay(true);\n\n        this.init(new GameServerKcpListener(this), channelConfig, address);\n\n        // Setup region info\n        this.info.setUp(true);\n        this.info.save();\n        LunarCore.getHttpServer().forceRegionListRefresh();\n        \n        // Force a system gc after everything is loaded and started\n        System.gc();\n\n        // Done\n        LunarCore.getLogger().info(\"Ca Server started on \" + address.getPort());\n        LunarCore.getLogger().warn(\"LUNARCORE IS A FREE SOFTWARE. IF YOU PAID FOR IT, YOU HAVE BEEN SCAMMED!\"); // DO NOT REMOVE. Anti-seller\n    }\n    \n    private void onTick() {\n        long timestamp = System.currentTimeMillis();\n        long delta = timestamp - lastTickTime;\n        this.lastTickTime = timestamp;\n        \n        synchronized (this.players) {\n            for (Player player : this.players.values()) {\n                try {\n                    player.onTick(timestamp, delta);\n                } catch (Exception e) {\n                    LunarCore.getLogger().error(\"[UID: \" + player.getUid() + \"] Player tick error: \", e);\n                }\n            }\n        }\n    }\n\n    public void onShutdown() {\n        // Close server socket\n        this.stop();\n        \n        // Set region info\n        this.info.setUp(false);\n        this.info.save();\n        \n        // Kick and save all players\n        List<Player> list = new ArrayList<>(players.size());\n        list.addAll(players.values());\n        \n        for (Player player : list) {\n            player.getSession().close();\n        }\n    }\n}\n"
        }
    ]
}