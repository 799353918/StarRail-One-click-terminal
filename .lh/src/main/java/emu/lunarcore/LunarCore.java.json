{
    "sourceFile": "src/main/java/emu/lunarcore/LunarCore.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1719141574248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719141580496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     }\n \n     public static void main(String[] args) {\n         // Start Server\n-        LunarCore.getLogger().info(\"Starting CarolCarol \" + getJarVersion());\n+        LunarCore.getLogger().info(\"Starting CarolCarolBcsi \" + getJarVersion());\n         LunarCore.getLogger().info(\"Git hash: \" + getGitHash());\n         LunarCore.getLogger().info(\"Game version: \" + GameConstants.VERSION);\n         boolean generateHandbook = true;\n \n"
                },
                {
                    "date": 1719141586996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     }\n \n     public static void main(String[] args) {\n         // Start Server\n-        LunarCore.getLogger().info(\"Starting CarolCarolBicsi \" + getJarVersion());\n+        LunarCore.getLogger().info(\"Starting CarolBicsi \" + getJarVersion());\n         LunarCore.getLogger().info(\"Git hash: \" + getGitHash());\n         LunarCore.getLogger().info(\"Game version: \" + GameConstants.VERSION);\n         boolean generateHandbook = true;\n \n"
                }
            ],
            "date": 1719141574248,
            "name": "Commit-0",
            "content": "package emu.lunarcore;\n\nimport java.io.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport emu.lunarcore.plugin.PluginManager;\nimport org.jline.reader.EndOfFileException;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.UserInterruptException;\nimport org.jline.reader.impl.LineReaderImpl;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\nimport emu.lunarcore.command.CommandManager;\nimport emu.lunarcore.data.ResourceLoader;\nimport emu.lunarcore.database.DatabaseManager;\nimport emu.lunarcore.server.game.GameServer;\nimport emu.lunarcore.server.http.HttpServer;\nimport emu.lunarcore.util.Handbook;\nimport emu.lunarcore.util.JsonUtils;\nimport lombok.Getter;\n\npublic class LunarCore {\n    private static final Logger log = LoggerFactory.getLogger(LunarCore.class);\n    \n    private static final File configFile = new File(\"./config.json\");\n    private static final File hotfixFile = new File(\"./hotfix.json\");\n    @Getter private static Config config;\n    @Getter private static HotfixData hotfixData;\n\n    @Getter private static DatabaseManager accountDatabase;\n    @Getter private static DatabaseManager gameDatabase;\n\n    @Getter private static HttpServer httpServer;\n    @Getter private static GameServer gameServer;\n\n    @Getter private static CommandManager commandManager;\n    @Getter private static PluginManager pluginManager;\n    @Getter private static ServerType serverType = ServerType.BOTH;\n\n    private static LineReaderImpl reader;\n    @Getter private static boolean usingDumbTerminal;\n    \n    private static long timeOffset = 0;\n\n    static {\n        // Setup console reader\n        try {\n            reader = (LineReaderImpl) LineReaderBuilder.builder()\n                    .terminal(TerminalBuilder.builder().dumb(true).build())\n                    .build();\n\n            usingDumbTerminal = Terminal.TYPE_DUMB.equals(reader.getTerminal().getType());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Load config\n        LunarCore.loadConfig();\n        LunarCore.updateServerTimeOffset();\n    }\n\n    public static void main(String[] args) {\n        // Start Server\n        LunarCore.getLogger().info(\"Starting Carol \" + getJarVersion());\n        LunarCore.getLogger().info(\"Git hash: \" + getGitHash());\n        LunarCore.getLogger().info(\"Game version: \" + GameConstants.VERSION);\n        boolean generateHandbook = true;\n\n        // Load commands\n        LunarCore.commandManager = new CommandManager();\n        \n        // Load plugin manager\n        LunarCore.pluginManager = new PluginManager();\n\n        try {\n            LunarCore.getPluginManager().loadPlugins();\n        } catch (Exception exception) {\n            LunarCore.getLogger().error(\"Unable to load plugins.\", exception);\n        }\n        \n        // Load hotfix data\n        LunarCore.loadHotfixData();\n\n        // Parse arguments\n        for (String arg : args) {\n            switch (arg) {\n            case \"-dispatch\":\n                serverType = ServerType.DISPATCH;\n                break;\n            case \"-game\":\n                serverType = ServerType.GAME;\n                break;\n            case \"-nohandbook\":\n            case \"-skiphandbook\":\n                generateHandbook = false;\n                break;\n            case \"-database\":\n                // Database only\n                DatabaseManager.startInternalMongoServer(LunarCore.getConfig().getInternalMongoServer());\n                LunarCore.getLogger().info(\"Running local mongo server at \" + DatabaseManager.getServer().getConnectionString());\n                // Console\n                LunarCore.startConsole();\n                return;\n            }\n        }\n\n        // Skip these if we are only running the http server in dispatch mode\n        if (serverType.runGame()) {\n            // Load resources\n            ResourceLoader.loadAll();\n\n            // Build handbook\n            if (generateHandbook) {\n                Handbook.generate();\n            }\n        }\n\n        try {\n            // Start Database(s)\n            LunarCore.initDatabases();\n        } catch (Exception exception) {\n            LunarCore.getLogger().error(\"Unable to start the database(s).\", exception);\n        }\n\n        try {\n            // Always run http server as it is needed by for dispatch and gateserver\n            httpServer = new HttpServer(serverType);\n            httpServer.start();\n        } catch (Exception exception) {\n            LunarCore.getLogger().error(\"Unable to start the HTTP server.\", exception);\n        }\n\n        // Start game server\n        if (serverType.runGame()) try {\n            gameServer = new GameServer(getConfig().getGameServer());\n            gameServer.start();\n        } catch (Exception exception) {\n            LunarCore.getLogger().error(\"Unable to start the game server.\", exception);\n        }\n        \n        // Hook into shutdown event\n        Runtime.getRuntime().addShutdownHook(new Thread(LunarCore::onShutdown));\n\n        // Enable plugins\n        LunarCore.getPluginManager().enablePlugins();\n\n        // Start console\n        LunarCore.startConsole();\n    }\n\n    public static Logger getLogger() {\n        return log;\n    }\n\n    public static LineReaderImpl getLineReader() {\n        return reader;\n    }\n\n    // Database\n\n    private static void initDatabases() {\n        if (LunarCore.getConfig().useSameDatabase) {\n            // Setup account and game database\n            accountDatabase = new DatabaseManager(LunarCore.getConfig().getAccountDatabase(), serverType);\n            // Optimization: Dont run a 2nd database manager if we are not running a gameserver\n            if (serverType.runGame()) {\n                gameDatabase = accountDatabase;\n            }\n        } else {\n            // Run separate databases\n            accountDatabase = new DatabaseManager(LunarCore.getConfig().getAccountDatabase(), ServerType.DISPATCH);\n            // Optimization: Dont run a 2nd database manager if we are not running a gameserver\n            if (serverType.runGame()) {\n                gameDatabase = new DatabaseManager(LunarCore.getConfig().getGameDatabase(), ServerType.GAME);\n            }\n        }\n    }\n\n    // Config/Hotfix\n\n    public static void loadConfig() {\n        // Load from file\n        try (FileReader file = new FileReader(configFile)) {\n            LunarCore.config = JsonUtils.loadToClass(file, Config.class);\n        } catch (Exception e) {\n            // Ignored\n        }\n        \n        // Sanity check\n        if (LunarCore.getConfig() == null) {\n            LunarCore.config = new Config();\n        } else {\n            LunarCore.getConfig().validate();\n        }\n        \n        // Save config\n        LunarCore.saveConfig();\n    }\n\n    public static void saveConfig() {\n        try (FileWriter file = new FileWriter(configFile)) {\n            Gson gson = new GsonBuilder()\n                    .setDateFormat(\"dd-MM-yyyy hh:mm:ss\")\n                    .setPrettyPrinting()\n                    .serializeNulls()\n                    .create();\n            \n            file.write(gson.toJson(config));\n        } catch (Exception e) {\n            getLogger().error(\"Config save error\");\n        }\n    }\n    \n    public static void loadHotfixData() {\n        // Load from hotfix file\n        try (FileReader file = new FileReader(hotfixFile)) {\n            LunarCore.hotfixData = JsonUtils.loadToClass(file, HotfixData.class);\n        } catch (Exception e) {\n            LunarCore.hotfixData = null;\n        }\n        \n        if (LunarCore.hotfixData == null) {\n            LunarCore.hotfixData = new HotfixData();\n            \n            // Save hotfix data\n            Gson gson = new GsonBuilder()\n                    .setPrettyPrinting()\n                    .serializeNulls()\n                    .create();\n            \n            try (FileWriter fw = new FileWriter(hotfixFile)) {\n                fw.write(gson.toJson(hotfixData));\n            } catch (Exception ex) {\n                // Ignored\n            }\n        }\n    }\n\n    // Build Config\n    \n    private static String getJarVersion() {\n        // Safely get the build config class without errors even if it hasnt been generated yet\n        try {\n            Class<?> buildConfig = Class.forName(LunarCore.class.getPackageName() + \".BuildConfig\");\n            return buildConfig.getField(\"VERSION\").get(null).toString();\n        } catch (Exception e) {\n            // Ignored\n        }\n        \n        return \"\";\n    }\n\n    public static String getGitHash() {\n        // Use a string builder in case one of the build config fields are missing\n        StringBuilder builder = new StringBuilder();\n        \n        // Safely get the build config class without errors even if it hasnt been generated yet\n        try {\n            SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            Class<?> buildConfig = Class.forName(LunarCore.class.getPackageName() + \".BuildConfig\");\n            \n            String hash = buildConfig.getField(\"GIT_HASH\").get(null).toString();\n            builder.append(hash);\n            \n            String timestamp = buildConfig.getField(\"GIT_TIMESTAMP\").get(null).toString();\n            long time = Long.parseLong(timestamp) * 1000;\n            builder.append(\" (\" + sf.format(new Date(time)) + \")\");\n        } catch (Exception e) {\n            // Ignored\n        }\n        \n        if (builder.isEmpty()) {\n            return \"UNKNOWN\";\n        } else {\n            return builder.toString();\n        }\n    }\n    \n    /**\n     * Returns the current server's time in milliseconds to send to the client. Can be used to spoof server time.\n     */\n    public static long currentServerTime() {\n        return convertToServerTime(System.currentTimeMillis());\n    }\n    \n    /**\n     * Converts a timestamp (in milliseconds) to the server time\n     */\n    public static long convertToServerTime(long time) {\n        return time + timeOffset;\n    }\n    \n    private static void updateServerTimeOffset() {\n        var timeOptions = LunarCore.getConfig().getServerTime();\n        if (timeOptions.isSpoofTime() && timeOptions.getSpoofDate() != null) {\n            timeOffset = timeOptions.getSpoofDate().getTime() - System.currentTimeMillis();\n        } else {\n            timeOffset = 0;\n        }\n    }\n    \n    /**\n     * Returns the memory usage of the server, in megabytes.\n     */\n    public static long getMemoryUsage() {\n        Runtime runtime = Runtime.getRuntime();\n        return (runtime.totalMemory() - runtime.freeMemory()) / 1_048_576L;\n    }\n\n    // Server console\n\n    private static void startConsole() {\n        try {\n            while (true) {\n                String input = reader.readLine(\"> \");\n                if (input == null || input.length() == 0) {\n                    continue;\n                }\n\n                LunarCore.getCommandManager().invoke(null, input);\n            }\n        } catch (UserInterruptException | EndOfFileException e) {\n            // CTRL + C / CTRL + D\n            System.exit(0);\n        } catch (Exception e) {\n            LunarCore.getLogger().error(\"Terminal error: \", e);\n        }\n    }\n\n    // Shutdown event\n\n    private static void onShutdown() {\n        if (gameServer != null) {\n            gameServer.onShutdown();\n        }\n\n        if (pluginManager != null) {\n            pluginManager.disablePlugins();\n        }\n    }\n\n    // Server enums\n\n    public enum ServerType {\n        DISPATCH    (0x1),\n        GAME        (0x2),\n        BOTH        (0x3);\n\n        private final int flags;\n\n        ServerType(int flags) {\n            this.flags = flags;\n        }\n\n        public boolean runDispatch() {\n            return (this.flags & 0x1) == 0x1;\n        }\n\n        public boolean runGame() {\n            return (this.flags & 0x2) == 0x2;\n        }\n    }\n\n    // Hiro was here\n}\n"
        }
    ]
}