{
    "sourceFile": "build.gradle",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1719130837289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719131038585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,11 @@\n     implementation group: 'de.bwaldvogel', name: 'mongo-java-server-h2-backend', version: '1.44.0'\n \n     implementation group: 'org.jline', name: 'jline', version: '3.24.1'\n     implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'\n-\n+    // 添加JavaFX库依赖项，确保使用正确版本的模块名称\n+    implementation 'org.openjfx:javafx-controls:17' // 根据需要替换版本号\n+    implementation 'org.openjfx:javafx-graphics:17'   // 根据需要替换版本号\n     protobuf files('proto/')\n \n     compileOnly 'org.projectlombok:lombok:1.18.30'\n     annotationProcessor 'org.projectlombok:lombok:1.18.30'\n"
                },
                {
                    "date": 1719131045438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n     implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'\n     // 添加JavaFX库依赖项，确保使用正确版本的模块名称\n     implementation 'org.openjfx:javafx-controls:17' // 根据需要替换版本号\n     implementation 'org.openjfx:javafx-graphics:17'   // 根据需要替换版本号\n+    implementation 'org.openjfx:javafx-base:17'      // 根据需要替换版本号\n     protobuf files('proto/')\n \n     compileOnly 'org.projectlombok:lombok:1.18.30'\n     annotationProcessor 'org.projectlombok:lombok:1.18.30'\n"
                },
                {
                    "date": 1719132084278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,11 +92,12 @@\n \n     implementation group: 'org.jline', name: 'jline', version: '3.24.1'\n     implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'\n     // 添加JavaFX库依赖项，确保使用正确版本的模块名称\n-    implementation 'org.openjfx:javafx-controls:17' // 根据需要替换版本号\n-    implementation 'org.openjfx:javafx-graphics:17'   // 根据需要替换版本号\n-    implementation 'org.openjfx:javafx-base:17'      // 根据需要替换版本号\n+// 确保JavaFX库依赖项的版本号与您的JDK版本相匹配\n+    implementation 'org.openjfx:javafx-controls:17.0.2' // 请替换为实际的版本号\n+    implementation 'org.openjfx:javafx-graphics:17.0.2'   // 请替换为实际的版本号\n+    implementation 'org.openjfx:javafx-base:17.0.2'      // 请替换为实际的版本号\n     protobuf files('proto/')\n \n     compileOnly 'org.projectlombok:lombok:1.18.30'\n     annotationProcessor 'org.projectlombok:lombok:1.18.30'\n"
                },
                {
                    "date": 1719132089660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,10 +91,10 @@\n     implementation group: 'de.bwaldvogel', name: 'mongo-java-server-h2-backend', version: '1.44.0'\n \n     implementation group: 'org.jline', name: 'jline', version: '3.24.1'\n     implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'\n-    // 添加JavaFX库依赖项，确保使用正确版本的模块名称\n-// 确保JavaFX库依赖项的版本号与您的JDK版本相匹配\n+\n+\n     implementation 'org.openjfx:javafx-controls:17.0.2' // 请替换为实际的版本号\n     implementation 'org.openjfx:javafx-graphics:17.0.2'   // 请替换为实际的版本号\n     implementation 'org.openjfx:javafx-base:17.0.2'      // 请替换为实际的版本号\n     protobuf files('proto/')\n"
                },
                {
                    "date": 1719133334492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     id 'com.google.protobuf' version '0.8.19'\n \n     id 'eclipse'\n     id 'idea'\n+    \n }\n \n compileJava.options.encoding = \"UTF-8\"\n compileTestJava.options.encoding = \"UTF-8\"\n"
                },
                {
                    "date": 1719133341157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     id 'com.google.protobuf' version '0.8.19'\n \n     id 'eclipse'\n     id 'idea'\n-    \n+    id ''\n }\n \n compileJava.options.encoding = \"UTF-8\"\n compileTestJava.options.encoding = \"UTF-8\"\n"
                },
                {
                    "date": 1719133473499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     id 'com.google.protobuf' version '0.8.19'\n \n     id 'eclipse'\n     id 'idea'\n-    id ''\n+    id 'ColorGradientApp'\n }\n \n compileJava.options.encoding = \"UTF-8\"\n compileTestJava.options.encoding = \"UTF-8\"\n"
                },
                {
                    "date": 1719133500005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n     id 'com.google.protobuf' version '0.8.19'\n \n     id 'eclipse'\n     id 'idea'\n-    id 'ColorGradientApp'\n }\n \n compileJava.options.encoding = \"UTF-8\"\n compileTestJava.options.encoding = \"UTF-8\"\n"
                }
            ],
            "date": 1719130837289,
            "name": "Commit-0",
            "content": "/*\n * This file was generated by the Gradle 'init' task.\n *\n * This generated file contains a sample Java project to get you started.\n * For more details take a look at the Java Quickstart chapter in the Gradle\n * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application\n    id 'application'\n\n    // Apply the java plugin to add support for Java\n    id 'java'\n\n    // Protoc plugin\n    id 'com.google.protobuf' version '0.8.19'\n\n    id 'eclipse'\n    id 'idea'\n}\n\ncompileJava.options.encoding = \"UTF-8\"\ncompileTestJava.options.encoding = \"UTF-8\"\n\nsourceCompatibility = JavaVersion.VERSION_17\ntargetCompatibility = JavaVersion.VERSION_17\n\nversion = '1.3.0'\n\nvar shouldGenerateProto = System.getenv(\"GENERATE_PROTO\") == \"true\"\nSystem.out.println(shouldGenerateProto ?\n        \"Generating proto files\" :\n        \"Skipping proto generation\")\n\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n\nprotobuf {\n    protoc {\n        artifact = 'com.google.protobuf:protoc:3.24.3'\n    }\n\n    plugins {\n        quickbuf {\n            artifact = 'us.hebi.quickbuf:protoc-gen-quickbuf:1.3.1'\n        }\n    }\n\n    generateProtoTasks {\n        all().each { task ->\n            task.builtins {\n                remove java\n            }\n            task.plugins {\n                quickbuf {\n                    //option 'store_unknown_fields=true'\n                    outputSubDir = ''\n                }\n            }\n        }\n    }\n\n    generatedFilesBaseDir = \"$projectDir/src/generated/\"\n}\n\ndependencies {\n    implementation fileTree(dir: 'lib', include: ['*.jar'])\n\n    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'\n    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.14'\n    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'\n\n    implementation group: 'it.unimi.dsi', name: 'fastutil-core', version: '8.5.12'\n    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'\n\n    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'\n    implementation group: 'us.hebi.quickbuf', name: 'quickbuf-runtime', version: '1.3.1'\n\n    implementation group: 'io.javalin', name: 'javalin', version: '5.6.3'\n\n    implementation group: 'io.netty', name: 'netty-common', version: '4.1.101.Final'\n    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.101.Final'\n    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.101.Final'\n    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.101.Final'\n\n    implementation group: 'dev.morphia.morphia', name: 'morphia-core', version: '2.3.9'\n    implementation group: 'de.bwaldvogel', name: 'mongo-java-server', version: '1.44.0'\n    implementation group: 'de.bwaldvogel', name: 'mongo-java-server-h2-backend', version: '1.44.0'\n\n    implementation group: 'org.jline', name: 'jline', version: '3.24.1'\n    implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.24.1'\n\n    protobuf files('proto/')\n\n    compileOnly 'org.projectlombok:lombok:1.18.30'\n    annotationProcessor 'org.projectlombok:lombok:1.18.30'\n}\n\nconfigurations.all {\n    exclude group: 'org.slf4j', module: 'slf4j'\n}\n\nclean {\n    if (shouldGenerateProto) {\n        delete protobuf.generatedFilesBaseDir\n    }\n}\n\napplication {\n    // Define the main class for the application\n    mainClassName = 'emu.lunarcore.LunarCore'\n}\n\nrun {\n    // Set the standard input to wait for user input\n    standardInput = System.in\n}\n\njar {\n\tdependsOn 'injectGitHash'\n\n\texclude '*.proto'\n\n    manifest {\n        attributes 'Main-Class': 'emu.lunarcore.LunarCore'\n    }\n\n    jar {\n        archiveBaseName = 'LunarCore'\n        archiveVersion = ''\n    }\n\n    from {\n        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }\n    }\n\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n\n    from('src/main/java') {\n        include '*.xml'\n    }\n\n    getDestinationDirectory().set(file(\".\"))\n}\n\nsourceSets {\n    main {\n        proto {\n            srcDir 'src/generated'\n        }\n        java {\n            srcDir 'src/main/java'\n        }\n    }\n}\n\nidea {\n    module {\n        // proto files and generated Java files are automatically added as\n        // source dirs.\n        // If you have additional sources, add them here:\n        sourceDirs += file('/proto/')\n    }\n}\n\neclipse {\n    classpath {\n        file.whenMerged { cp ->\n            cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/', null) )\n        }\n    }\n}\n\ntasks.register('injectGitHash') {\n    def gitCommitHash = {\n        try {\n            return 'git rev-parse --verify --short HEAD'.execute().text.trim()\n        } catch (ignored) {\n            return ''\n        }\n    }\n    \n    def gitCommitTime = {\n        try {\n            return 'git log -1 --format=%at --date=raw'.execute().text.trim()\n        } catch (ignored) {\n            return '0'\n        }\n    }\n\n    new File(project.projectDir.getAbsolutePath() + '/src/main/java/emu/lunarcore/BuildConfig.java').text = \"\"\"\npackage emu.lunarcore;\n\npublic final class BuildConfig {\n\tpublic static final String VERSION = \\\"${version}\\\";\n    public static final String GIT_HASH = \\\"${gitCommitHash()}\\\";\n    public static final String GIT_TIMESTAMP = \\\"${gitCommitTime()}\\\";\n}\n\"\"\"\n}\n\ntask updateProto {\n    group 'Build'\n    description 'Cleans generated proto folder and regenerates protos'\n\n    if (shouldGenerateProto) {\n        dependsOn 'clean'\n    }\n\n    dependsOn 'generateProto'\n}\n\nprocessResources {\n    dependsOn 'generateProto'\n}\n"
        }
    ]
}